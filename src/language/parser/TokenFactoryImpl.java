
package language.parser;

import java.util.regex.Pattern;
import language.parser.framework.Token;
import language.parser.framework.TokenFactory;
import language.parser.nodes.EOFToken;
import language.parser.nodes._Punctuation0Token;
import language.parser.nodes._Punctuation10Token;
import language.parser.nodes._Punctuation11Token;
import language.parser.nodes._Punctuation12Token;
import language.parser.nodes._Punctuation13Token;
import language.parser.nodes._Punctuation14Token;
import language.parser.nodes._Punctuation15Token;
import language.parser.nodes._Punctuation16Token;
import language.parser.nodes._Punctuation17Token;
import language.parser.nodes._Punctuation18Token;
import language.parser.nodes._Punctuation19Token;
import language.parser.nodes._Punctuation1Token;
import language.parser.nodes._Punctuation20Token;
import language.parser.nodes._Punctuation21Token;
import language.parser.nodes._Punctuation2Token;
import language.parser.nodes._Punctuation3Token;
import language.parser.nodes._Punctuation4Token;
import language.parser.nodes._Punctuation5Token;
import language.parser.nodes._Punctuation6Token;
import language.parser.nodes._Punctuation7Token;
import language.parser.nodes._Punctuation8Token;
import language.parser.nodes._Punctuation9Token;
import language.parser.nodes.errorToken;
import language.parser.nodes.floatToken;
import language.parser.nodes.idToken;
import language.parser.nodes.intToken;


/**
 * This class was generated by the LRPaGe parser generator v1.0 using the com.sun.codemodel library.
 * 
 * <P>LRPaGe is available from https://github.com/tbepler/LRPaGe.
 * <P>CodeModel is available from https://codemodel.java.net/.
 * 
 */
public class TokenFactoryImpl
    implements TokenFactory<Visitor>
{

    private final static Pattern[] PATTERNS = new Pattern[] {Pattern.compile("\\Q!\\E"), Pattern.compile("\\Q>\\E"), Pattern.compile("\\Q==\\E"), Pattern.compile("\\Q<\\E"), Pattern.compile("\\Q)\\E"), Pattern.compile("\\Q(\\E"), Pattern.compile("\\Q}\\E"), Pattern.compile("\\Q;\\E"), Pattern.compile("\\Q{\\E"), Pattern.compile("\\Qwhere\\E"), Pattern.compile("\\Qelse\\E"), Pattern.compile("\\Qthen\\E"), Pattern.compile("\\Qif\\E"), Pattern.compile("\\Qfalse\\E"), Pattern.compile("\\Qtrue\\E"), Pattern.compile("\\Q=\\E"), Pattern.compile("\\Qdef\\E"), Pattern.compile("\\Q^\\E"), Pattern.compile("\\Q/\\E"), Pattern.compile("\\Q*\\E"), Pattern.compile("\\Q-\\E"), Pattern.compile("\\Q+\\E"), Pattern.compile("[a-zA-Z][a-zA-Z0-9_]*"), Pattern.compile("-?[0-9]+"), Pattern.compile("-?[0-9]+\\.[0-9]+"), Pattern.compile("\\s+"), Pattern.compile(".")};

    @Override
    public Token<Visitor> build(int index) {
        switch (index) {
            case  0 :
                return new _Punctuation21Token();
            case  1 :
                return new _Punctuation20Token();
            case  2 :
                return new _Punctuation19Token();
            case  3 :
                return new _Punctuation18Token();
            case  4 :
                return new _Punctuation17Token();
            case  5 :
                return new _Punctuation16Token();
            case  6 :
                return new _Punctuation15Token();
            case  7 :
                return new _Punctuation14Token();
            case  8 :
                return new _Punctuation13Token();
            case  9 :
                return new _Punctuation12Token();
            case  10 :
                return new _Punctuation11Token();
            case  11 :
                return new _Punctuation10Token();
            case  12 :
                return new _Punctuation9Token();
            case  13 :
                return new _Punctuation8Token();
            case  14 :
                return new _Punctuation7Token();
            case  15 :
                return new _Punctuation6Token();
            case  16 :
                return new _Punctuation5Token();
            case  17 :
                return new _Punctuation4Token();
            case  18 :
                return new _Punctuation3Token();
            case  19 :
                return new _Punctuation2Token();
            case  20 :
                return new _Punctuation1Token();
            case  21 :
                return new _Punctuation0Token();
            case  22 :
                return new idToken();
            case  23 :
                return new intToken();
            case  24 :
                return new floatToken();
            case  25 :
                return null;
            case  26 :
                return new errorToken();
            default:
                throw new RuntimeException("Index out of bounds");
        }
    }

    @Override
    public Token<Visitor> build(int index, String text, int line, int pos) {
        switch (index) {
            case  0 :
                return new _Punctuation21Token(text, line, pos);
            case  1 :
                return new _Punctuation20Token(text, line, pos);
            case  2 :
                return new _Punctuation19Token(text, line, pos);
            case  3 :
                return new _Punctuation18Token(text, line, pos);
            case  4 :
                return new _Punctuation17Token(text, line, pos);
            case  5 :
                return new _Punctuation16Token(text, line, pos);
            case  6 :
                return new _Punctuation15Token(text, line, pos);
            case  7 :
                return new _Punctuation14Token(text, line, pos);
            case  8 :
                return new _Punctuation13Token(text, line, pos);
            case  9 :
                return new _Punctuation12Token(text, line, pos);
            case  10 :
                return new _Punctuation11Token(text, line, pos);
            case  11 :
                return new _Punctuation10Token(text, line, pos);
            case  12 :
                return new _Punctuation9Token(text, line, pos);
            case  13 :
                return new _Punctuation8Token(text, line, pos);
            case  14 :
                return new _Punctuation7Token(text, line, pos);
            case  15 :
                return new _Punctuation6Token(text, line, pos);
            case  16 :
                return new _Punctuation5Token(text, line, pos);
            case  17 :
                return new _Punctuation4Token(text, line, pos);
            case  18 :
                return new _Punctuation3Token(text, line, pos);
            case  19 :
                return new _Punctuation2Token(text, line, pos);
            case  20 :
                return new _Punctuation1Token(text, line, pos);
            case  21 :
                return new _Punctuation0Token(text, line, pos);
            case  22 :
                return new idToken(text, line, pos);
            case  23 :
                return new intToken(text, line, pos);
            case  24 :
                return new floatToken(text, line, pos);
            case  25 :
                return null;
            case  26 :
                return new errorToken(text, line, pos);
            default:
                throw new RuntimeException("Index out of bounds");
        }
    }

    @Override
    public Pattern[] getPatterns() {
        return PATTERNS;
    }

    @Override
    public Token<Visitor> getEOFToken(int line, int pos) {
        return new EOFToken(line, pos);
    }

    @Override
    public int size() {
        return  27;
    }

}
