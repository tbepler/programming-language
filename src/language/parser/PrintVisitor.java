
package language.parser;

import language.parser.nodes.Add;
import language.parser.nodes.Assign;
import language.parser.nodes.Conditional;
import language.parser.nodes.Divide;
import language.parser.nodes.Eq;
import language.parser.nodes.FApply;
import language.parser.nodes.False;
import language.parser.nodes.Greater;
import language.parser.nodes.IdListAppend;
import language.parser.nodes.IdListHead;
import language.parser.nodes.Less;
import language.parser.nodes.Multiply;
import language.parser.nodes.Negate;
import language.parser.nodes.Not;
import language.parser.nodes.ParenExp;
import language.parser.nodes.Power;
import language.parser.nodes.Subtract;
import language.parser.nodes.True;
import language.parser.nodes.Where;
import language.parser.nodes._Punctuation5assignprog;
import language.parser.nodes.assign_Punctuation14ListAppendassign_Punctuation14;
import language.parser.nodes.assign_Punctuation14ListStart;
import language.parser.nodes.binopexp;
import language.parser.nodes.errorToken;
import language.parser.nodes.expprog;
import language.parser.nodes.floatToken;
import language.parser.nodes.floatexp;
import language.parser.nodes.idToken;
import language.parser.nodes.idexp;
import language.parser.nodes.intToken;
import language.parser.nodes.intexp;
import language.parser.nodes.uopexp;


/**
 * This class was generated by the LRPaGe parser generator v1.0 using the com.sun.codemodel library.
 * 
 * <P>LRPaGe is available from https://github.com/tbepler/LRPaGe.
 * <P>CodeModel is available from https://codemodel.java.net/.
 * 
 */
public class PrintVisitor
    implements Visitor
{

    private final static String DELIM = "  ";
    private int depth = 0;

    private void print(Object obj) {
        for (int i = 0; (i<depth); i ++) {
            System.out.print(DELIM);
        }
        System.out.println(obj);
    }

    @Override
    public void visit(idToken node) {
        this.print(node);
    }

    @Override
    public void visit(intToken node) {
        this.print(node);
    }

    @Override
    public void visit(floatToken node) {
        this.print(node);
    }

    @Override
    public void visit(errorToken node) {
        this.print(node);
    }

    @Override
    public void visit(_Punctuation5assignprog node) {
        this.print(node);
        this.print("{");
        depth = (depth + 1);
        node.assign0 .accept(this);
        depth = (depth- 1);
        this.print("}");
    }

    @Override
    public void visit(expprog node) {
        this.print(node);
        this.print("{");
        depth = (depth + 1);
        node.exp0 .accept(this);
        depth = (depth- 1);
        this.print("}");
    }

    @Override
    public void visit(Assign node) {
        this.print(node);
        this.print("{");
        depth = (depth + 1);
        node.idlist0 .accept(this);
        node.exp1 .accept(this);
        depth = (depth- 1);
        this.print("}");
    }

    @Override
    public void visit(IdListHead node) {
        this.print(node);
        this.print("{");
        depth = (depth + 1);
        node.id0 .accept(this);
        depth = (depth- 1);
        this.print("}");
    }

    @Override
    public void visit(IdListAppend node) {
        this.print(node);
        this.print("{");
        depth = (depth + 1);
        node.idlist0 .accept(this);
        node.id1 .accept(this);
        depth = (depth- 1);
        this.print("}");
    }

    @Override
    public void visit(assign_Punctuation14ListStart node) {
        this.print(node);
        this.print("{");
        depth = (depth + 1);
        depth = (depth- 1);
        this.print("}");
    }

    @Override
    public void visit(assign_Punctuation14ListAppendassign_Punctuation14 node) {
        this.print(node);
        this.print("{");
        depth = (depth + 1);
        node.assign_punctuation14list0 .accept(this);
        node.assign1 .accept(this);
        depth = (depth- 1);
        this.print("}");
    }

    @Override
    public void visit(idexp node) {
        this.print(node);
        this.print("{");
        depth = (depth + 1);
        node.id0 .accept(this);
        depth = (depth- 1);
        this.print("}");
    }

    @Override
    public void visit(intexp node) {
        this.print(node);
        this.print("{");
        depth = (depth + 1);
        node.int0 .accept(this);
        depth = (depth- 1);
        this.print("}");
    }

    @Override
    public void visit(floatexp node) {
        this.print(node);
        this.print("{");
        depth = (depth + 1);
        node.float0 .accept(this);
        depth = (depth- 1);
        this.print("}");
    }

    @Override
    public void visit(True node) {
        this.print(node);
        this.print("{");
        depth = (depth + 1);
        depth = (depth- 1);
        this.print("}");
    }

    @Override
    public void visit(False node) {
        this.print(node);
        this.print("{");
        depth = (depth + 1);
        depth = (depth- 1);
        this.print("}");
    }

    @Override
    public void visit(Conditional node) {
        this.print(node);
        this.print("{");
        depth = (depth + 1);
        node.exp0 .accept(this);
        node.exp1 .accept(this);
        node.exp2 .accept(this);
        depth = (depth- 1);
        this.print("}");
    }

    @Override
    public void visit(Where node) {
        this.print(node);
        this.print("{");
        depth = (depth + 1);
        node.exp0 .accept(this);
        node.assign_punctuation14list1 .accept(this);
        depth = (depth- 1);
        this.print("}");
    }

    @Override
    public void visit(binopexp node) {
        this.print(node);
        this.print("{");
        depth = (depth + 1);
        node.binop0 .accept(this);
        depth = (depth- 1);
        this.print("}");
    }

    @Override
    public void visit(uopexp node) {
        this.print(node);
        this.print("{");
        depth = (depth + 1);
        node.uop0 .accept(this);
        depth = (depth- 1);
        this.print("}");
    }

    @Override
    public void visit(FApply node) {
        this.print(node);
        this.print("{");
        depth = (depth + 1);
        node.exp0 .accept(this);
        node.exp1 .accept(this);
        depth = (depth- 1);
        this.print("}");
    }

    @Override
    public void visit(ParenExp node) {
        this.print(node);
        this.print("{");
        depth = (depth + 1);
        node.exp0 .accept(this);
        depth = (depth- 1);
        this.print("}");
    }

    @Override
    public void visit(Add node) {
        this.print(node);
        this.print("{");
        depth = (depth + 1);
        node.exp0 .accept(this);
        node.exp1 .accept(this);
        depth = (depth- 1);
        this.print("}");
    }

    @Override
    public void visit(Subtract node) {
        this.print(node);
        this.print("{");
        depth = (depth + 1);
        node.exp0 .accept(this);
        node.exp1 .accept(this);
        depth = (depth- 1);
        this.print("}");
    }

    @Override
    public void visit(Multiply node) {
        this.print(node);
        this.print("{");
        depth = (depth + 1);
        node.exp0 .accept(this);
        node.exp1 .accept(this);
        depth = (depth- 1);
        this.print("}");
    }

    @Override
    public void visit(Divide node) {
        this.print(node);
        this.print("{");
        depth = (depth + 1);
        node.exp0 .accept(this);
        node.exp1 .accept(this);
        depth = (depth- 1);
        this.print("}");
    }

    @Override
    public void visit(Power node) {
        this.print(node);
        this.print("{");
        depth = (depth + 1);
        node.exp0 .accept(this);
        node.exp1 .accept(this);
        depth = (depth- 1);
        this.print("}");
    }

    @Override
    public void visit(Less node) {
        this.print(node);
        this.print("{");
        depth = (depth + 1);
        node.exp0 .accept(this);
        node.exp1 .accept(this);
        depth = (depth- 1);
        this.print("}");
    }

    @Override
    public void visit(Eq node) {
        this.print(node);
        this.print("{");
        depth = (depth + 1);
        node.exp0 .accept(this);
        node.exp1 .accept(this);
        depth = (depth- 1);
        this.print("}");
    }

    @Override
    public void visit(Greater node) {
        this.print(node);
        this.print("{");
        depth = (depth + 1);
        node.exp0 .accept(this);
        node.exp1 .accept(this);
        depth = (depth- 1);
        this.print("}");
    }

    @Override
    public void visit(Negate node) {
        this.print(node);
        this.print("{");
        depth = (depth + 1);
        node.exp0 .accept(this);
        depth = (depth- 1);
        this.print("}");
    }

    @Override
    public void visit(Not node) {
        this.print(node);
        this.print("{");
        depth = (depth + 1);
        node.exp0 .accept(this);
        depth = (depth- 1);
        this.print("}");
    }

}
